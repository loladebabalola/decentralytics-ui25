import { useState } from "react";
import { addDays, addMonths, endOfMonth, endOfWeek, format, isSameMonth, startOfMonth, startOfWeek, subMonths } from "date-fns";
import Image from "next/image";
import Link from "next/link";
import ComponentContainer from "../../ComponentContainer";
import { DayPopover } from "../../DayPopOver";
import LineItem from "../../LineItem";
import { mockActivity } from "@/app/utils/data";


const DaoDetailActivityTab = () => {
  const [currentDate, setCurrentDate] = useState(new Date());

  const header = () => (
    <div className="flex gap-[48px] items-center mb-[24px]">
      <h2 className="text-[14px]/[20px] tracking-[-0.3%] align-[cap] font-semibold text-white">
        {format(currentDate, "MMMM yyyy")}
      </h2>
      <div className="gap-[12px] flex items-center">
        <button className="rotate-180 cursor-pointer" onClick={() => setCurrentDate(subMonths(currentDate, 1))}>
          <Image src="/right-caret-icon.svg" width={0} height={0} className="w-[20px] h-[20px]" alt="right icon"/>
        </button>
        <button className="cursor-pointer" onClick={() => setCurrentDate(addMonths(currentDate, 1))}>
          <Image src="/right-caret-icon.svg" width={0} height={0} className="w-[20px] h-[20px]" alt="right icon"/>
        </button>
      </div>
    </div>
  );

  const generateCalendar = () => {
  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(monthStart);
  const startDate = startOfWeek(monthStart, { weekStartsOn: 0 });
  const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });
  const activityColors: { [key: string]: string } = {
      token: "bg-[#1E80FF] text-white", 
      event: "bg-[#14C784] text-white",
      team: "bg-[#FEB752] text-white",
      "q & a session": "bg-[#FF69B4] text-white",
    };

    const rows = [];
    let days = [];
    let day = startDate;

    while (day <= endDate) {
      for (let i = 0; i < 7; i++) {
        const iso = format(day, "yyyy-MM-dd");
        const activity = mockActivity[iso] || [];
        const FirstWeek  = rows.length === 0 

        days.push(
          <div
            key={format(day, 'yyyy-MM-dd')}
            className={`py-[20px] px-[12px] h-[170px] border border-[#2B3640] relative font-medium text-[12px]/[18px] tracking-[-0.25%] align-[cap] ${
              !isSameMonth(day, monthStart) ? "text-gray-400" : ""
            }`}
          >
            {FirstWeek ? (
              <div className="flex flex-col w-full gap-[12px]">
                <div className="text-[#84919F] align-[cap] font-semibold text-[12px]/[18px] tracking-[-0.25%] w-fit mx-auto">{format(day, "EEEE")}</div>
                <div className="text-white align-[cap] font-semibold text-[12px]/[18px] tracking-[-0.25%] w-fit mx-auto">{format(day, "d")}</div>
              </div>
            ):
            (
              <>
                <div className="text-white align-[cap] font-semibold text-[12px]/[18px] tracking-[-0.25%] w-fit mx-auto">{format(day, "d")}</div>
              </>
            )
            }

            {activity.length > 0 && 
              <DayPopover 
              content={
                <div className="w-full p-[20px] flex flex-col gap-[16px] ">
                  <ComponentContainer>
                    <div className="flex flex-col gap-[12px]">
                      <h1 className="text-[#84919F] font-semibold text-[10px]/[16px] tracking-[-0.22%] align-[cap]">Token UNLOCK EVENT</h1>
                      <p className="text-white font-semibold text-[14px]/[20px] tracking-[-0.3%] align-[cap]">
                        Unlock of 92.63M(0.93% of Max Supply)~$49.54M(2.65% of M. Cap)
                      </p>
                    </div>
                    <div className="flex justify-between items-start pb-[28px] border-b border-[#2B3640] mt-[24px]">
                      <div className="text-[12px]/[18px] tracking-[-0.25%] align-[cap] flex flex-col gap-[12px]">
                        <p className="font-semibold text-white">August 16, 2025</p>
                        <p className="font-medium text-[#84919F]">12:00pm - 5:00pm</p>
                      </div>
                      <button className="flex items-center bg-[#529DFF14] rounded-[18px] py-[4px] pr-[12px] pl-[10px] gap-[4px]">
                        <Image src="/website-link-icon.svg" width={0} height={0} className="w-[14px] h-[14px]" alt="go to website"/>
                        <p className="font-semibold align-[cap] text-[12px]/[18px] text-[#1E80FF]">Event Link</p>
                      </button>
                    </div>
                    <div className="mt-[28px]">
                      <p className="text-white text-[12px]/[18px] align-[cap] tracking-[-0.25%] font-medium">
                        This is a brief description of the event. 
                        It should be completely generated by us and should give more information of what exactly is happening
                      </p>
                    </div>
                  </ComponentContainer>
                  <ComponentContainer>
                    <div className="flex items-center gap-[48px]">
                      <div className="w-[38%]">
                        <h1 className="font-semibold text-[14px]/[20px] tracking-[-0.3%] align-[cap] text-white">54% to be unlocked</h1>
                        <div className="flex items-center gap-[32px] mt-[12px]">
                          <Image src="/modal-chart.svg" width={0} height={0} className="w-[91px] h-[91px]" alt="modal event chart"/>
                          <div className="h-full flex flex-col gap-[16px]">
                            <span className="flex items-center flex-shrink-0 gap-[8px]">
                              <p className="text-[12px]/[18px] tracking-[-0.25%] align-[cap] font-medium text-white">DEC 4.89B</p>
                              <Image src="/info-icon.svg" width={0} height={0} className="w-[10px] h-[10px]" alt="info icon"/>
                            </span>
                            <span className="flex items-center flex-shrink-0 gap-[8px]">
                              <p className="text-[12px]/[18px] tracking-[-0.25%] align-[cap] font-medium text-white">-1.58B</p>
                              <Image src="/info-icon.svg" width={0} height={0} className="w-[10px] h-[10px]" alt="info icon"/>
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="flex flex-1 justify-between items-center">
                        <div className="flex flex-col gap-[24px] ">
                          <p className="text-[#84919F] tracking-[-0.25%] align-[cap] font-semibold text-[12px]/[18px]">Name</p>
                          <LineItem revColor="#FEB752" revType="Team and Advisors"/>
                          <LineItem revColor="#14C784" revType="Investors"/>
                        </div>
                        <div className="flex flex-col gap-[24px] text-right ">
                          <p className="text-[#84919F] tracking-[-0.25%] align-[cap] font-semibold text-[12px]/[18px]">% of Allocation</p>
                          <p className="font-semibold text-[12px]/[18px] tracking-[-0.25%] align-[cap] text-white h-[9px] shrink-0">+2.08% (+56.12M tokens)</p>
                          <p className="font-semibold text-[12px]/[18px] tracking-[-0.25%] align-[cap] text-white h-[9px] shrink-0">+2.08% (+36.51M tokens)</p>
                        </div>
                      </div>
                    </div>
                  </ComponentContainer>
                  <div className="flex items-center w-full justify-end gap-[8px]">
                    <Link href="/" className="rounded-[18px] py-[9px] px-[12px] text-center border border-[#1E80FF] text-[#1E80FF] font-semibold text-[12px]/[18px] tracking-[-0.25%] align-[cap]">
                      Share event details
                    </Link>
                    <Link href="/" className="rounded-[18px] py-[9px] px-[12px] text-center border border-[#1E80FF] text-white font-semibold text-[12px]/[18px] tracking-[-0.25%] align-[cap] bg-[#1E80FF]">
                      Add to calender
                    </Link>
                  </div>
                </div>
                }
                trigger={
                  <div className="w-full flex flex-col gap-[4px] mt-[32px]">
                    {activity.map((act) => (
                      <div
                        key={act.id}
                        className={`w-full flex items-center justify-start h-[20px] py-[12px] px-[8px] rounded-[4px] ${activityColors[act.type.toLowerCase()] || "bg-gray-500"}`}
                        title={`${act.type}: ${act.title}`}
                      >
                        {act.title}
                      </div>
                    ))}
                  </div>
                } 
              />
            }
          </div>
        );

        day = addDays(day, 1);
      }

      rows.push(
        <div className="grid grid-cols-7" key={format(day, 'yyyy-MM-dd')}>
          {days}
        </div>
      );
      days = [];
    }

    return <div className="">{rows}</div>;
  };

  return (
    <ComponentContainer pad="20px">
      <div className="w-full overflow-x-scroll scrollbar-hide h-auto">
        <div className="w-[1352px]">
          {header()}
          {generateCalendar()}
        </div>
       </div>
    </ComponentContainer>
  )
}

export default DaoDetailActivityTab